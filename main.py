# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_Vdb2XxxCwvUDqTVVT7hoS0qYL73aSw

from google.colab import files
files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c titanic
"""

import pandas as pd
print("Version of pandas : ",pd.__version__)
import seaborn as sns
print("Version of seaborn : ",sns.__version__)
import matplotlib.pyplot as plt
import numpy as np
print("Version of numpy : ",np.__version__)
#%matplotlib inline
import sklearn as sk
print("Version of scikit-learnt : ",sk.__version__)
import math

train_data = pd.read_csv("./dataset.csv")
train_data.head()

#Name isn't needed
train_data.drop("Name" , axis = 1 , inplace = True)

sns.heatmap(train_data.isna())
plt.show()

train_data.drop("Cabin" , axis = 1 , inplace = True)

sns.heatmap(train_data.isna())
plt.show()

plt.plot(train_data['Age'].dropna())
plt.show()

data = train_data[['Age' , 'Pclass']].dropna()

sns.scatterplot(data = data , x = 'Pclass' , y = 'Age' , hue = 'Pclass' , cmap = "virdis")
plt.show()

sns.countplot(x = 'Pclass' , data = train_data)
plt.show()

sns.countplot(x = 'Survived' , data = train_data)
plt.show()

sns.countplot(x = 'Survived' , data = train_data , hue = "Pclass")
plt.show()

sns.countplot(x = 'Survived' , data = train_data , hue = "Sex")
plt.show()

avg_age_class1 = math.ceil(data[data['Pclass'] == 1]['Age'].mean())
print("avg_age_class1 : ",avg_age_class1)
avg_age_class2 = math.ceil(data[data['Pclass'] == 2]['Age'].mean())
print("avg_age_class2 : ",avg_age_class2)
avg_age_class3 = math.ceil(data[data['Pclass'] == 3]['Age'].mean())
print("avg_age_class3 : ",avg_age_class3)

def updateAge(List):
    age = List[0]
    Pclass = List[1]
    if pd.isnull(age):
        if Pclass == 1:
            age = avg_age_class1
        elif Pclass == 2:
            age = avg_age_class2
        else:
            age = avg_age_class1
    return age

train_data['Age'] = train_data[['Age' , "Pclass"]].apply(updateAge , axis = 1)

sns.heatmap(train_data.isna())
plt.show()

train_data.head(n = 3)

print("Parch value : " , train_data['Parch'].unique())

train_data.drop(columns = ['Embarked' , "Ticket" ] , axis = 1 , inplace = True)

def replaceSex(s):
    if s == "male":
        return 1
    return 0

train_data['Sex'] = train_data['Sex'].apply(replaceSex) #1->male  || 0->female

train_data.head(n = 3)

train_data.drop("PassengerId" , axis = 1 , inplace = True)

train_data.head(n = 3)

X = train_data.drop("Survived" , axis = 1)
y = train_data['Survived']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=100)

print("Details of train_data : ")
print("Shape of X_train : " , X_train.shape)
print("Shape of y_train : " , y_train.shape)
print("Features name : ",X_train.columns)
print("Target name : Survived")
print("\n================================\n")
print("Details of test_data : ")
print("Shape of X_test : " , X_test.shape)
print("Shape of y_test : " , y_test.shape)

C_ = [0.0001,0.001,0.01,0.1,1,5,10,20,30,40,50,100]

model = {}
acc = []
val_acc = []

for i in C_:
    model_name = "model_c_" + str(i)
    model[model_name] = {}
    model_LR = LogisticRegression(C = i).fit(X_train , y_train)
    model[model_name]['model'] = model_LR
    
    model[model_name]['acc'] = model_LR.score(X_train , y_train)
    acc.append(model[model_name]['acc'])

    model[model_name]['val_acc'] = model_LR.score(X_test , y_test)
    val_acc.append(model[model_name]['val_acc'])

plt.plot(acc , label = "training_data")
plt.plot(val_acc,'o--' , label = "testing_data")
plt.ylabel("Accurecy")
plt.xlabel("C->")
plt.legend()
plt.show()

take_model = model["model_c_10"]['model']

from sklearn.metrics import classification_report , confusion_matrix , accuracy_score

print("Confusion matrix for train _data : ")
print(confusion_matrix(y_train , take_model.predict(X_train)))
print("Confusion matrix for test _data : ")
print(confusion_matrix(y_test , take_model.predict(X_test)))

print("Accurecy score for training data : %.3f %%"%( accuracy_score(y_train , take_model.predict(X_train)) * 100))
print("Accurecy score for training data : %.3f %%"%( accuracy_score(y_test , take_model.predict(X_test)) * 100))

print("Classification report for training data : \n============================================================\n")
print(classification_report(y_train , take_model.predict(X_train)))
print("\nClassification report for testing data : \n============================================================\n")
print(classification_report(y_test , take_model.predict(X_test)))

